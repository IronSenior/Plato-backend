    openapi: 3.0.0
    info:
      title: Plato API
      description: Control all your social network accounts
      version: 1.0.0
    servers:
      - url: /
        description: Principal Server
    tags:
      - name: User
        description: REST API for requesting and returning users
      - name: SocialNetworkGroup
        description: REST API for requesting and returning social network groups
    paths:
      /user/create/:
        post:
          tags: [User]
          summary: Create an user if the given json is correct
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/user-received'
          responses:
            '200':    # status code
              description: The user was created
            '500':
              description: Error
      /user/get/{userId}/:
        get:
          tags: [User]
          summary: Get a user by ID
          parameters:
            - in: path
              name: userId
              schema:
                type: string
              required: true
              description: UUID of the user to get
          responses:
            '200':    # status code
              description: The user was found
            '404':
              description: User was not found
            '500':
              description: Error
      /user/login/:
        post:
          tags: [User]
          summary: Check if password is correct and returns the user
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/user-login'
          responses:
            '200':
              description: The login was succesfull
            '401':
              description: User email or password was incorrect
            '500':
              description: Error
      /sn/group/create/:
        post:
          tags: [SocialNetworkGroup]
          summary: Create a new social network group for a user
          security:
            - bearerAuth: []
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/snGroup-received'
          responses:
            '200':
              description: The group was created
            '401':
              description: Access is not allowed
            '500':
              description: Error
      /sn/group/user/{userId}/:
        get:
          tags: [SocialNetworkGroup]
          summary: Get a social network group by user id
          security:
            - bearerAuth: []
          parameters:
            - in: path
              name: userId
              schema:
                type: string
              required: true
              description: UUID of the user owner of the groups
          responses:
            '200':    # status code
              description: The group was found
            '404':
              description: Access is not allowed
            '500':
              description: Error

    components:
      securitySchemes:
        bearerAuth:            # arbitrary name for the security scheme
          type: http
          scheme: bearer
          bearerFormat: JWT  
      schemas:
        user-received:
          type: object
          properties:
            user:
              type: object
              properties:
                userid:
                  type: string
                username:
                  type: string
                usermail:
                  type: string
                password:
                  type: string
        user-login:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
        snGroup-received:
          type: object
          properties:
            snGroup:
              type: object
              properties:
                id:
                  type: string
                userid:
                  type: string
                name:
                  type: string
                image:
                  type: string